name: Build and Push Docker Image

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Docker image tag (leave empty for auto-increment)'
        required: false
        default: ''
        type: string

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.CR_PAT || secrets.GITHUB_TOKEN }}

      - name: Check authentication
        run: |
          echo "Testing authentication to GHCR..."
          echo "Username: ${{ github.actor }}"
          echo "Repository: ${{ github.repository }}"
          echo "Event name: ${{ github.event_name }}"
          echo "Workflow: ${{ github.workflow }}"
          echo "Run ID: ${{ github.run_id }}"

      - name: Debug repository info
        run: |
          echo "Repository: ${{ github.repository }}"
          echo "Repository owner: ${{ github.repository_owner }}"
          echo "Repository name: ${{ github.event.repository.name }}"
          echo "Event repository: ${{ github.event.repository.full_name }}"

      - name: Generate version and set image name
        run: |
          OWNER_NAME=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          REPO_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2 | tr '[:upper:]' '[:lower:]')
          echo "OWNER_NAME=$OWNER_NAME" >> $GITHUB_ENV
          echo "REPO_NAME=$REPO_NAME" >> $GITHUB_ENV
          
          # Check if custom tag is provided
          if [ -n "${{ github.event.inputs.image_tag }}" ]; then
            VERSION="${{ github.event.inputs.image_tag }}"
            echo "Using custom tag: $VERSION"
          else
            # Auto-increment version
            if [ -f "VERSION" ]; then
              CURRENT_VERSION=$(cat VERSION)
              echo "Current version: $CURRENT_VERSION"
              
              # Parse version components
              MAJOR=$(echo $CURRENT_VERSION | cut -d. -f1)
              MINOR=$(echo $CURRENT_VERSION | cut -d. -f2)
              PATCH=$(echo $CURRENT_VERSION | cut -d. -f3)
              
              # Increment patch version
              NEW_PATCH=$((PATCH + 1))
              VERSION="$MAJOR.$MINOR.$NEW_PATCH"
            else
              # Start with version 1.0.1 if no VERSION file exists
              VERSION="1.0.1"
            fi
            
            echo "New version: $VERSION"
            
            # Update VERSION file
            echo "$VERSION" > VERSION
            
            # Commit and push the version update
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add VERSION
            git commit -m "Auto-increment version to $VERSION" || echo "No changes to commit"
            git push origin main || echo "Push failed or no changes"
          fi
          
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Final image name: ghcr.io/$OWNER_NAME/$REPO_NAME:$VERSION"

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ env.OWNER_NAME }}/${{ env.REPO_NAME }}:${{ env.VERSION }}
            ghcr.io/${{ env.OWNER_NAME }}/${{ env.REPO_NAME }}:latest

      - name: Success message
        run: |
          echo "Successfully built and pushed:"
          echo "  - ghcr.io/${{ env.OWNER_NAME }}/${{ env.REPO_NAME }}:${{ env.VERSION }}"
          echo "  - ghcr.io/${{ env.OWNER_NAME }}/${{ env.REPO_NAME }}:latest" 