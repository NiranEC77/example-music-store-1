name: Build and Push Microservices

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Docker image tag (leave empty for auto-increment)'
        required: false
        default: ''
        type: string

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.CR_PAT || secrets.GITHUB_TOKEN }}

      - name: Generate version and set image names
        run: |
          OWNER_NAME=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          REPO_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2 | tr '[:upper:]' '[:lower:]')
          echo "OWNER_NAME=$OWNER_NAME" >> $GITHUB_ENV
          echo "REPO_NAME=$REPO_NAME" >> $GITHUB_ENV
          
          # Check if custom tag is provided
          if [ -n "${{ github.event.inputs.image_tag }}" ]; then
            VERSION="${{ github.event.inputs.image_tag }}"
            echo "Using custom tag: $VERSION"
          else
            # Auto-increment version
            if [ -f "VERSION" ]; then
              CURRENT_VERSION=$(cat VERSION)
              echo "Current version: $CURRENT_VERSION"
              
              # Parse version components
              MAJOR=$(echo $CURRENT_VERSION | cut -d. -f1)
              MINOR=$(echo $CURRENT_VERSION | cut -d. -f2)
              PATCH=$(echo $CURRENT_VERSION | cut -d. -f3)
              
              # Increment patch version
              NEW_PATCH=$((PATCH + 1))
              VERSION="$MAJOR.$MINOR.$NEW_PATCH"
            else
              # Start with version 1.0.1 if no VERSION file exists
              VERSION="1.0.1"
            fi
            
            echo "New version: $VERSION"
            
            # Update VERSION file
            echo "$VERSION" > VERSION
          fi
          
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Building microservices with version: $VERSION"

      - name: Build and push Store Service
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ env.OWNER_NAME }}/${{ env.REPO_NAME }}-store:${{ env.VERSION }}
            ghcr.io/${{ env.OWNER_NAME }}/${{ env.REPO_NAME }}-store:latest

      - name: Build and push Cart Service
        uses: docker/build-push-action@v5
        with:
          context: ./cart-service
          push: true
          tags: |
            ghcr.io/${{ env.OWNER_NAME }}/${{ env.REPO_NAME }}-cart:${{ env.VERSION }}
            ghcr.io/${{ env.OWNER_NAME }}/${{ env.REPO_NAME }}-cart:latest

      - name: Build and push Order Service
        uses: docker/build-push-action@v5
        with:
          context: ./order-service
          push: true
          tags: |
            ghcr.io/${{ env.OWNER_NAME }}/${{ env.REPO_NAME }}-order:${{ env.VERSION }}
            ghcr.io/${{ env.OWNER_NAME }}/${{ env.REPO_NAME }}-order:latest

      - name: Update Kubernetes deployment files
        run: |
          # Update the main k8s deployment for store service
          sed -i "s|image: ghcr.io/niranec77/example-music-store-1:.*|image: ghcr.io/${{ env.OWNER_NAME }}/${{ env.REPO_NAME }}-store:${{ env.VERSION }}|" k8s-deployment.yaml
          
          # Update cart service deployment
          sed -i "s|image: ghcr.io/niranec77/.*-cart:.*|image: ghcr.io/${{ env.OWNER_NAME }}/${{ env.REPO_NAME }}-cart:${{ env.VERSION }}|" k8s-cart-deployment.yaml
          
          # Update order service deployment
          sed -i "s|image: ghcr.io/niranec77/.*-order:.*|image: ghcr.io/${{ env.OWNER_NAME }}/${{ env.REPO_NAME }}-order:${{ env.VERSION }}|" k8s-order-deployment.yaml

      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add VERSION k8s-deployment.yaml k8s-cart-deployment.yaml k8s-order-deployment.yaml
          git commit -m "Auto-increment version to ${{ env.VERSION }} and update all k8s deployments" || echo "No changes to commit"
          git push origin main || echo "Push failed or no changes"

      - name: Success message
        run: |
          echo "üéâ Successfully built and pushed all microservices:"
          echo ""
          echo "üì¶ Store Service:"
          echo "  - ghcr.io/${{ env.OWNER_NAME }}/${{ env.REPO_NAME }}-store:${{ env.VERSION }}"
          echo "  - ghcr.io/${{ env.OWNER_NAME }}/${{ env.REPO_NAME }}-store:latest"
          echo ""
          echo "üõí Cart Service:"
          echo "  - ghcr.io/${{ env.OWNER_NAME }}/${{ env.REPO_NAME }}-cart:${{ env.VERSION }}"
          echo "  - ghcr.io/${{ env.OWNER_NAME }}/${{ env.REPO_NAME }}-cart:latest"
          echo ""
          echo "üìã Order Service:"
          echo "  - ghcr.io/${{ env.OWNER_NAME }}/${{ env.REPO_NAME }}-order:${{ env.VERSION }}"
          echo "  - ghcr.io/${{ env.OWNER_NAME }}/${{ env.REPO_NAME }}-order:latest"
          echo ""
          echo "üìù Updated Kubernetes deployment files:"
          echo "  - k8s-deployment.yaml (Store Service)"
          echo "  - k8s-cart-deployment.yaml (Cart Service)"
          echo "  - k8s-order-deployment.yaml (Order Service)"
          echo ""
          echo "üöÄ To deploy all services to Kubernetes, run:"
          echo "kubectl apply -f k8s-deployment.yaml"
          echo "kubectl apply -f k8s-cart-deployment.yaml"
          echo "kubectl apply -f k8s-order-deployment.yaml"
          echo ""
          echo "üê≥ To run locally with Docker Compose:"
          echo "docker-compose up --build" 